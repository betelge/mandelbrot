#version 100

#pragma optionNV(fastmath off)
#pragma optionNV(fastprecision off)

attribute vec3 position;

uniform mat4 modelViewMatrix;

vec2 pos;

uniform float MAX_ITER;
uniform vec2 scale;
uniform vec2 offset;
uniform vec2 offsetFine;

uniform float split;

varying vec4 rgba;

vec4 color(float value, float radius, float max);

vec4 c;

vec2 splitf(float a);

vec2 add (vec2 dsa, vec2 dsb);
vec2 sub (vec2 dsa, vec2 dsb);
vec2 mul (vec2 dsa, vec2 dsb);

vec2 imag;
vec4 result;
vec4 iter(vec4 z)
{
	//return vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + 2.0*c;
	
	
	imag = mul(z.xy, z.zw);
	imag = add(imag, imag);
	result = vec4(sub(mul(z.xy, z.xy), mul(z.zw, z.zw)), imag);
	
	result.xy = add(result.xy, c.xy);
	result.zw = add(result.zw, c.zw);
	
	return result;
}

void main(void)
{
	vec4 posit = modelViewMatrix * vec4(position, 1.);
	pos = 2.*posit.xy;
	
	// Calculate c
	
	vec2 posX = /*vec2(pos.x,0.);*/splitf(pos.x);
	vec2 posY = /*vec2(pos.y,0.);*/splitf(pos.y);
	
	vec2 scaX = /*vec2(scale.x,0.);*/splitf(scale.x);
	vec2 scaY = /*vec2(scale.y,0.);*/splitf(scale.y);
	
	vec2 offX = vec2(2.*offset.x,2.*offsetFine.x);//splitf(2.0*offset.x);
	vec2 offY = vec2(2.*offset.y,2.*offsetFine.y);//splitf(2.0*offset.y);
	
	vec2 real = mul(scaX, posX);
	real = add(real, offX);
	
	vec2 imag = mul(scaY, posY);
	imag = add(imag, offY);
	
	c = vec4(real, imag);

	vec4 z = vec4(0.0);

	int i;
	int max = int(MAX_ITER);
	vec2 radius2 = vec2(0.);
	for( i=0; i<max; i++ ) {
		radius2 = add(mul(z.xy,z.xy), mul(z.zw,z.zw));
		if( radius2.x > 16.) break;
		z = iter(z);
	}
	
	float value = (i == max ? 0. : float(i));
	
	rgba = color(value, radius2.x, MAX_ITER);
	
	gl_Position = posit;
}
